#include <iostream>
#include <omp.h>

#define  N      3
#define  DEBUG  0
#define  EPS    1.0e-18

/* Please define the matrices in here */
static double  A[N][N];
static double  B[N][N];
static double  C[N][N];

using namespace std;

int main() {
    
    int i,j,k;
    double  t0, t1, t2, t_w;
    double  dc_inv, d_mflops;
    
    int     ierr;
    int     iflag, iflag_t;

    
    /* matrix generation --------------------------*/
    if (DEBUG == 1) {
        for(j=0; j<N; j++) {
            for(i=0; i<N; i++) {
                A[j][i] = 1.0;
                B[j][i] = 1.0;
                C[j][i] = 0.0;
            }
        }
    } else {
        srand(1);
        dc_inv = 1.0/(double)RAND_MAX;
        for(j=0; j<N; j++) {
            for(i=0; i<N; i++) {
                A[j][i] = rand()*dc_inv;
                B[j][i] = rand()*dc_inv;
                C[j][i] = 0.0;
            }
        }
    } /* end of matrix generation --------------------------*/
    
#pragma omp parallel for default(none) \
                         private(i,j,k) shared(A,B,C)
        for(i=0;i<N;i++) {
            for(j=0;j<N;j++) {
                for(k=0;k<N;k++) {
                    C[i][j] += A[i][k] * B[k][j];
                }
            }
        } /*-- End of parallel for --*/
    
    
    for(i=0;i<N;i++) {
        for(j=0;j<N;j++) {
 //           cout << "a[" << i << "][" << j << "] " << a[i][j] << "*";
 //           cout << "b[" << i << "][" << j << "] " << b[i][j] << "  ";
            cout << "C[" << i << "][" << j << "] = " << C[i][j] << "  ";
        }
        cout << endl;
    }
     
    
    return 0;
}
